# Generate PR Comment for PowerShell Validation
# This script generates PR comments based on validation results

param(
    [int]$CriticalErrors = 0,
    [int]$HighErrors = 0,
    [int]$TotalIssues = 0,
    [string]$ChangedFiles = "",
    [string]$RunId = "",
    [string]$Repository = "",
    [string]$OutputPath = ".\validation-results\pr-comment.md"
)

# Determine status
$statusIcon = '[OK]'
$statusMessage = 'No issues detected.'

if ($CriticalErrors -gt 0) {
    $statusIcon = '[CRITICAL]'
    $statusMessage = 'Critical errors detected - please review immediately.'
} elseif ($HighErrors -gt 0) {
    $statusIcon = '[WARNING]'
    $statusMessage = 'High priority issues detected - please review.'
} elseif ($TotalIssues -gt 0) {
    $statusIcon = '[INFO]'
    $statusMessage = 'Minor issues detected - consider addressing for better code quality.'
}

# Prepare file lists
$changedFilesList = if ($ChangedFiles) {
    ($ChangedFiles -split ',' | ForEach-Object { "- $_" }) -join "`n"
} else {
    "- No PowerShell files changed"
}

# Prepare recommendations
$recommendations = @()
if ($CriticalErrors -gt 0) { $recommendations += '[CRITICAL] **Priority 1**: Address critical errors to ensure script functionality' }
if ($HighErrors -gt 0) { $recommendations += '[WARNING] **Priority 2**: Review high priority issues for best practices compliance' }
if ($TotalIssues -gt 0) { $recommendations += '[INFO] **General**: Consider addressing remaining issues for improved code quality' }
if ($recommendations.Count -eq 0) { $recommendations += '[OK] **Great job!** No issues detected in your PowerShell scripts.' }

# Generate comment content
$comment = @"
## PowerShell Script Validation Results $statusIcon

**Analysis Summary:**
- [CRITICAL] Critical Errors: $CriticalErrors
- [WARNING] High Priority Issues: $HighErrors
- [INFO] Total Issues: $TotalIssues
- Files Analyzed: $(if ($ChangedFiles) { ($ChangedFiles -split ',').Count } else { 'None' })

### Status
$statusMessage

### Analyzed Files
$changedFilesList

### Detailed Reports
Comprehensive validation reports are available as workflow artifacts:
- **Individual File Reports**: JSON format for each analyzed file
- **Comprehensive HTML Report**: Complete repository analysis
- **Summary Report**: JSON format with overall statistics

### Recommendations
$($recommendations -join "`n")

### Resources
- [Download Reports (Workflow Artifacts)](https://github.com/$Repository/actions/runs/$RunId)
- [PSScriptAnalyzer Rules](https://github.com/PowerShell/PSScriptAnalyzer/tree/master/RuleDocumentation)
- [PowerShell Best Practices](https://docs.microsoft.com/en-us/powershell/scripting/developer/cmdlet/cmdlet-overview)

---
*This is an informational report and will not block your PR. Review the detailed reports for specific recommendations.*

*Generated by PowerShell Script Validator | Run ID: $RunId*
"@

# Ensure output directory exists
$outputDir = Split-Path $OutputPath -Parent
if (!(Test-Path $outputDir)) {
    New-Item -Path $outputDir -ItemType Directory -Force | Out-Null
}

# Write comment to file
$comment | Out-File -FilePath $OutputPath -Encoding UTF8

Write-Host "PR comment generated at: $OutputPath"
