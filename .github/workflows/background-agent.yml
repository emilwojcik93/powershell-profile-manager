name: Background Agent - Continuous Testing and Fixing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run every hour to check for issues
    - cron: '0 * * * *'
  workflow_dispatch:
    inputs:
      mode:
        description: 'Agent mode'
        required: true
        default: 'full'
        type: choice
        options:
        - full
        - syntax-only
        - workflows-only
        - modules-only

jobs:
  background-agent:
    runs-on: windows-latest
    timeout-minutes: 60
    
    strategy:
      matrix:
        powershell-version: [5.1, 7.4]
      fail-fast: false
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
        
    - name: Setup PowerShell
      uses: PowerShell/setup-powershell@v1
      with:
        version: ${{ matrix.powershell-version }}
        
    - name: Initialize Agent
      shell: pwsh
      run: |
        Write-Host "Initializing Background Agent..." -ForegroundColor Cyan
        Write-Host "PowerShell Version: $($PSVersionTable.PSVersion)" -ForegroundColor Yellow
        Write-Host "Agent Mode: ${{ github.event.inputs.mode || 'full' }}" -ForegroundColor Yellow
        Write-Host "Runner OS: $($env:RUNNER_OS)" -ForegroundColor Yellow
        Write-Host "Workflow: ${{ github.workflow }}" -ForegroundColor Yellow
        Write-Host "Event: ${{ github.event_name }}" -ForegroundColor Yellow
        
        # Set up error handling
        $ErrorActionPreference = "Continue"
        $global:AgentErrors = @()
        $global:AgentFixes = @()
        
        # Create agent log function
        function Write-AgentLog {
            param([string]$Message, [string]$Level = "Info")
            $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
            $emoji = switch ($Level) {
                "Error" { "ERROR" }
                "Warning" { "WARN" }
                "Success" { "SUCCESS" }
                "Fix" { "FIX" }
                default { "INFO" }
            }
            Write-Host "[$timestamp] $emoji $Message" -ForegroundColor $(
                switch ($Level) {
                    "Error" { "Red" }
                    "Warning" { "Yellow" }
                    "Success" { "Green" }
                    "Fix" { "Magenta" }
                    default { "White" }
                }
            )
        }
        
        Write-AgentLog "Agent initialized successfully" "Success"
        
    - name: Validate Repository Structure
      shell: pwsh
      run: |
        Write-AgentLog "Validating repository structure..." "Info"
        
        $requiredFiles = @(
            "Microsoft.PowerShell_profile.ps1",
            "scripts\install.ps1",
            "scripts\uninstall.ps1",
            "scripts\release.ps1",
            "README.md",
            "CONTRIBUTING.md",
            "LICENSE",
            ".gitignore",
            ".cursorrules"
        )
        
        $requiredDirs = @(
            "modules",
            "docs",
            ".github\workflows",
            ".vscode",
            ".cursor"
        )
        
        $structureValid = $true
        
        # Check files
        foreach ($file in $requiredFiles) {
            if (Test-Path $file) {
                Write-AgentLog "File exists: $file" "Success"
            } else {
                Write-AgentLog "Missing file: $file" "Error"
                $global:AgentErrors += "Missing file: $file"
                $structureValid = $false
            }
        }
        
        # Check directories
        foreach ($dir in $requiredDirs) {
            if (Test-Path $dir -PathType Container) {
                Write-AgentLog "Directory exists: $dir" "Success"
            } else {
                Write-AgentLog "Missing directory: $dir" "Error"
                $global:AgentErrors += "Missing directory: $dir"
                $structureValid = $false
            }
        }
        
        # Check module structure
        $modules = @("VideoCompressor", "PowerShellMCP", "ExampleModule")
        foreach ($module in $modules) {
            $modulePath = "modules\$module"
            if (Test-Path $modulePath -PathType Container) {
                Write-AgentLog "Module directory exists: $module" "Success"
                
                $moduleFiles = @("$module.psm1", "$module.psd1", "README.md")
                foreach ($file in $moduleFiles) {
                    $filePath = Join-Path $modulePath $file
                    if (Test-Path $filePath) {
                        Write-AgentLog "Module file exists: $module\$file" "Success"
                    } else {
                        Write-AgentLog "Missing module file: $module\$file" "Error"
                        $global:AgentErrors += "Missing module file: $module\$file"
                        $structureValid = $false
                    }
                }
            } else {
                Write-AgentLog "Missing module directory: $module" "Error"
                $global:AgentErrors += "Missing module directory: $module"
                $structureValid = $false
            }
        }
        
        if ($structureValid) {
            Write-AgentLog "Repository structure validation passed" "Success"
        } else {
            Write-AgentLog "Repository structure validation failed" "Error"
            exit 1
        }
        
    - name: Validate PowerShell Syntax
      shell: pwsh
      run: |
        Write-AgentLog "Validating PowerShell syntax..." "Info"
        
        $syntaxValid = $true
        
        # Test main profile script
        try {
            $null = [System.Management.Automation.PSParser]::Tokenize((Get-Content "Microsoft.PowerShell_profile.ps1" -Raw), [ref]$null)
            Write-AgentLog "Main profile script syntax is valid" "Success"
        } catch {
            Write-AgentLog "Main profile script syntax error: $($_.Exception.Message)" "Error"
            $global:AgentErrors += "Main profile script syntax error"
            $syntaxValid = $false
        }
        
        # Test scripts
        $scripts = @("install.ps1", "uninstall.ps1", "release.ps1")
        foreach ($script in $scripts) {
            $scriptPath = "scripts\$script"
            try {
                $null = [System.Management.Automation.PSParser]::Tokenize((Get-Content $scriptPath -Raw), [ref]$null)
                Write-AgentLog "$script syntax is valid" "Success"
            } catch {
                Write-AgentLog "$script syntax error: $($_.Exception.Message)" "Error"
                $global:AgentErrors += "$script syntax error"
                $syntaxValid = $false
            }
        }
        
        # Test modules
        $modules = @("VideoCompressor", "PowerShellMCP", "ExampleModule")
        foreach ($module in $modules) {
            $psm1Path = "modules\$module\$module.psm1"
            $psd1Path = "modules\$module\$module.psd1"
            
            try {
                $null = [System.Management.Automation.PSParser]::Tokenize((Get-Content $psm1Path -Raw), [ref]$null)
                Write-AgentLog "$module.psm1 syntax is valid" "Success"
            } catch {
                Write-AgentLog "$module.psm1 syntax error: $($_.Exception.Message)" "Error"
                $global:AgentErrors += "$module.psm1 syntax error"
                $syntaxValid = $false
            }
            
            try {
                $null = [System.Management.Automation.PSParser]::Tokenize((Get-Content $psd1Path -Raw), [ref]$null)
                Write-AgentLog "$module.psd1 syntax is valid" "Success"
            } catch {
                Write-AgentLog "$module.psd1 syntax error: $($_.Exception.Message)" "Error"
                $global:AgentErrors += "$module.psd1 syntax error"
                $syntaxValid = $false
            }
        }
        
        if ($syntaxValid) {
            Write-AgentLog "PowerShell syntax validation passed" "Success"
        } else {
            Write-AgentLog "PowerShell syntax validation failed" "Error"
            exit 1
        }
        
    - name: Test Module Loading
      shell: pwsh
      run: |
        Write-AgentLog "Testing module loading..." "Info"
        
        $loadingValid = $true
        $modules = @("VideoCompressor", "PowerShellMCP", "ExampleModule")
        
        foreach ($module in $modules) {
            Write-AgentLog "Testing $module module loading..." "Info"
            
            $modulePath = Join-Path (Get-Location) "modules\$module"
            
            try {
                Import-Module $modulePath -Force -ErrorAction Stop
                Write-AgentLog "$module module loads successfully" "Success"
                
                # Test module functions
                $moduleInfo = Get-Module $module
                if ($moduleInfo.ExportedFunctions.Count -gt 0) {
                    Write-AgentLog "$module exports $($moduleInfo.ExportedFunctions.Count) functions" "Success"
                    
                    # List exported functions
                    foreach ($func in $moduleInfo.ExportedFunctions.Keys) {
                        Write-AgentLog "  - $func" "Info"
                    }
                } else {
                    Write-AgentLog "$module exports no functions" "Warning"
                }
                
                Remove-Module $module -Force
            } catch {
                Write-AgentLog "$module module failed to load: $($_.Exception.Message)" "Error"
                $global:AgentErrors += "$module module loading error"
                $loadingValid = $false
            }
        }
        
        if ($loadingValid) {
            Write-AgentLog "Module loading test passed" "Success"
        } else {
            Write-AgentLog "Module loading test failed" "Error"
            exit 1
        }
        
    - name: Test Main Profile Loading
      shell: pwsh
      run: |
        Write-AgentLog "Testing main profile loading..." "Info"
        
        try {
            # Load the main profile script to test Cursor detection
            . ".\Microsoft.PowerShell_profile.ps1"
            Write-AgentLog "Main profile script loads successfully" "Success"
            
            # Test if Cursor detection function exists
            if (Get-Command Test-CursorEnvironment -ErrorAction SilentlyContinue) {
                $isCursor = Test-CursorEnvironment
                Write-AgentLog "Cursor environment detection works (Result: $isCursor)" "Success"
            } else {
                Write-AgentLog "Test-CursorEnvironment function not found" "Error"
                $global:AgentErrors += "Test-CursorEnvironment function missing"
                exit 1
            }
            
            # Test profile manager functions
            $profileFunctions = @(
                "Get-ProfileModules",
                "Get-ProfileModuleStatus", 
                "Get-ProfileManagerStatus",
                "Load-ProfileModule",
                "Unload-ProfileModule",
                "Reload-ProfileModule",
                "Unload-AllProfileModules",
                "Remove-ProfileManager",
                "Restore-DefaultProfile"
            )
            
            foreach ($func in $profileFunctions) {
                if (Get-Command $func -ErrorAction SilentlyContinue) {
                    Write-AgentLog "$func function available" "Success"
                } else {
                    Write-AgentLog "$func function not found" "Error"
                    $global:AgentErrors += "$func function missing"
                    exit 1
                }
            }
            
        } catch {
            Write-AgentLog "Main profile script failed to load: $($_.Exception.Message)" "Error"
            $global:AgentErrors += "Main profile loading error"
            exit 1
        }
        
    - name: Test PowerShellMCP Module
      shell: pwsh
      run: |
        Write-AgentLog "Testing PowerShellMCP module..." "Info"
        
        try {
            Import-Module ".\modules\PowerShellMCP" -Force
            Write-AgentLog "PowerShellMCP module loads successfully" "Success"
            
            # Test MCP functions
            $mcpFunctions = @(
                "Start-PowerShellMCPServer",
                "Stop-PowerShellMCPServer",
                "Get-PowerShellMCPStatus",
                "Test-PowerShellMCPConnection",
                "Invoke-PowerShellMCPCommand",
                "Get-PowerShellMCPConfig",
                "Set-PowerShellMCPConfig"
            )
            
            foreach ($func in $mcpFunctions) {
                if (Get-Command $func -ErrorAction SilentlyContinue) {
                    Write-AgentLog "$func function available" "Success"
                } else {
                    Write-AgentLog "$func function not found" "Error"
                    $global:AgentErrors += "$func function missing"
                    exit 1
                }
            }
            
            # Test MCP configuration
            $config = Get-PowerShellMCPConfig
            if ($config -and $config.ServerPort -and $config.ServerHost) {
                Write-AgentLog "MCP configuration is valid" "Success"
                Write-AgentLog "  Port: $($config.ServerPort)" "Info"
                Write-AgentLog "  Host: $($config.ServerHost)" "Info"
                Write-AgentLog "  Max Execution Time: $($config.MaxExecutionTime) seconds" "Info"
            } else {
                Write-AgentLog "MCP configuration is invalid" "Error"
                $global:AgentErrors += "MCP configuration invalid"
                exit 1
            }
            
            Remove-Module PowerShellMCP -Force
        } catch {
            Write-AgentLog "PowerShellMCP module test failed: $($_.Exception.Message)" "Error"
            $global:AgentErrors += "PowerShellMCP module error"
            exit 1
        }
        
    - name: Test VideoCompressor Module
      shell: pwsh
      run: |
        Write-AgentLog "Testing VideoCompressor module..." "Info"
        
        try {
            Import-Module ".\modules\VideoCompressor" -Force
            Write-AgentLog "VideoCompressor module loads successfully" "Success"
            
            # Test VideoCompressor functions
            $vcFunctions = @(
                "Install-FFmpeg",
                "Get-VideoProperties",
                "Get-OptimalCompressionSettings",
                "Get-OutputDirectory",
                "Compress-Video"
            )
            
            foreach ($func in $vcFunctions) {
                if (Get-Command $func -ErrorAction SilentlyContinue) {
                    Write-AgentLog "$func function available" "Success"
                } else {
                    Write-AgentLog "$func function not found" "Error"
                    $global:AgentErrors += "$func function missing"
                    exit 1
                }
            }
            
            Remove-Module VideoCompressor -Force
        } catch {
            Write-AgentLog "VideoCompressor module test failed: $($_.Exception.Message)" "Error"
            $global:AgentErrors += "VideoCompressor module error"
            exit 1
        }
        
    - name: Test Installation Script
      shell: pwsh
      run: |
        Write-AgentLog "Testing installation script..." "Info"
        
        # Create test directory
        $testPath = "C:\Temp\ProfileManagerTest_$([System.Guid]::NewGuid().ToString('N')[0..7] -join '')"
        New-Item -ItemType Directory -Path $testPath -Force | Out-Null
        
        try {
            # Test installation script execution
            Write-AgentLog "Testing installation script execution..." "Info"
            $result = & ".\scripts\install.ps1" -InstallPath $testPath -Silent -Force 2>&1
            
            if ($LASTEXITCODE -eq 0) {
                Write-AgentLog "Installation script runs without errors" "Success"
                
                # Verify installation results
                if (Test-Path "$testPath\Microsoft.PowerShell_profile.ps1") {
                    Write-AgentLog "Main profile script was installed" "Success"
                } else {
                    Write-AgentLog "Main profile script was not installed" "Warning"
                }
                
                if (Test-Path "$testPath\modules") {
                    Write-AgentLog "Modules directory was created" "Success"
                } else {
                    Write-AgentLog "Modules directory was not created" "Warning"
                }
                
            } else {
                Write-AgentLog "Installation script failed with exit code: $LASTEXITCODE" "Error"
                Write-AgentLog "Output: $result" "Error"
                $global:AgentErrors += "Installation script failure"
                exit 1
            }
        } catch {
            Write-AgentLog "Installation script exception: $($_.Exception.Message)" "Error"
            $global:AgentErrors += "Installation script exception"
            exit 1
        } finally {
            # Cleanup
            if (Test-Path $testPath) {
                Remove-Item $testPath -Recurse -Force -ErrorAction SilentlyContinue
                Write-AgentLog "Test directory cleaned up" "Info"
            }
        }
        
    - name: Test Uninstallation Script
      shell: pwsh
      run: |
        Write-AgentLog "Testing uninstallation script..." "Info"
        
        try {
            $result = & ".\scripts\uninstall.ps1" -Silent -Force 2>&1
            if ($LASTEXITCODE -eq 0) {
                Write-AgentLog "Uninstallation script runs without errors" "Success"
            } else {
                Write-AgentLog "Uninstallation script failed with exit code: $LASTEXITCODE" "Error"
                Write-AgentLog "Output: $result" "Error"
                $global:AgentErrors += "Uninstallation script failure"
                exit 1
            }
        } catch {
            Write-AgentLog "Uninstallation script exception: $($_.Exception.Message)" "Error"
            $global:AgentErrors += "Uninstallation script exception"
            exit 1
        }
        
    - name: Test Release Script
      shell: pwsh
      run: |
        Write-AgentLog "Testing release script..." "Info"
        
        try {
            $result = & ".\scripts\release.ps1" -Version "1.0.0-test" -OutputPath ".\test-release" 2>&1
            if ($LASTEXITCODE -eq 0) {
                Write-AgentLog "Release script runs without errors" "Success"
                
                # Check if release was created
                if (Test-Path ".\test-release") {
                    Write-AgentLog "Release directory was created" "Success"
                } else {
                    Write-AgentLog "Release directory was not created" "Warning"
                }
                
            } else {
                Write-AgentLog "Release script failed with exit code: $LASTEXITCODE" "Error"
                Write-AgentLog "Output: $result" "Error"
                $global:AgentErrors += "Release script failure"
                exit 1
            }
        } catch {
            Write-AgentLog "Release script exception: $($_.Exception.Message)" "Error"
            $global:AgentErrors += "Release script exception"
            exit 1
        } finally {
            # Cleanup test release directory
            if (Test-Path ".\test-release") {
                Remove-Item ".\test-release" -Recurse -Force -ErrorAction SilentlyContinue
                Write-AgentLog "Test release directory cleaned up" "Info"
            }
        }
        
    - name: Generate Agent Report
      shell: pwsh
      run: |
        Write-AgentLog "Generating agent report..." "Info"
        
        Write-Host "`n" -NoNewline
        Write-Host "════════════════════════════════════════════════════════════════" -ForegroundColor Cyan
        Write-Host "                    BACKGROUND AGENT REPORT                     " -ForegroundColor Cyan
        Write-Host "════════════════════════════════════════════════════════════════" -ForegroundColor Cyan
        
        Write-Host "`nAgent Information:" -ForegroundColor Yellow
        Write-Host "  PowerShell Version: $($PSVersionTable.PSVersion)" -ForegroundColor White
        Write-Host "  Agent Mode: ${{ github.event.inputs.mode || 'full' }}" -ForegroundColor White
        Write-Host "  Runner OS: $($env:RUNNER_OS)" -ForegroundColor White
        Write-Host "  Workflow: ${{ github.workflow }}" -ForegroundColor White
        Write-Host "  Event: ${{ github.event_name }}" -ForegroundColor White
        Write-Host "  Timestamp: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC')" -ForegroundColor White
        
        Write-Host "`nTest Results:" -ForegroundColor Yellow
        Write-Host "  ✅ Repository structure validation: PASSED" -ForegroundColor Green
        Write-Host "  ✅ PowerShell syntax validation: PASSED" -ForegroundColor Green
        Write-Host "  ✅ Module loading test: PASSED" -ForegroundColor Green
        Write-Host "  ✅ Main profile loading test: PASSED" -ForegroundColor Green
        Write-Host "  ✅ PowerShellMCP module test: PASSED" -ForegroundColor Green
        Write-Host "  ✅ VideoCompressor module test: PASSED" -ForegroundColor Green
        Write-Host "  ✅ Installation script test: PASSED" -ForegroundColor Green
        Write-Host "  ✅ Uninstallation script test: PASSED" -ForegroundColor Green
        Write-Host "  ✅ Release script test: PASSED" -ForegroundColor Green
        
        if ($global:AgentErrors.Count -eq 0) {
            Write-Host "`nOverall Status: ✅ ALL TESTS PASSED" -ForegroundColor Green
            Write-Host "Repository is functioning correctly!" -ForegroundColor Green
        } else {
            Write-Host "`nOverall Status: ❌ ISSUES FOUND" -ForegroundColor Red
            Write-Host "Errors encountered:" -ForegroundColor Red
            foreach ($error in $global:AgentErrors) {
                Write-Host "  - $error" -ForegroundColor Red
            }
        }
        
        Write-Host "`n════════════════════════════════════════════════════════════════" -ForegroundColor Cyan
        Write-Host "                      END OF REPORT                             " -ForegroundColor Cyan
        Write-Host "════════════════════════════════════════════════════════════════" -ForegroundColor Cyan
        
        # Set workflow output
        if ($global:AgentErrors.Count -eq 0) {
            Write-Host "##[set-output name=status;]success"
            Write-Host "##[set-output name=errors;]0"
        } else {
            Write-Host "##[set-output name=status;]failure"
            Write-Host "##[set-output name=errors;]$($global:AgentErrors.Count)"
            exit 1
        }
        
  auto-fix:
    runs-on: windows-latest
    needs: background-agent
    if: failure()
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Setup PowerShell
      uses: PowerShell/setup-powershell@v1
      with:
        version: '7.4'
        
    - name: Auto-Fix Issues
      shell: pwsh
      run: |
        Write-Host "Attempting to auto-fix detected issues..." -ForegroundColor Cyan
        
        # This is where we would implement auto-fix logic
        # For now, just log that we're in auto-fix mode
        Write-Host "Auto-fix mode is not fully implemented yet" -ForegroundColor Yellow
        Write-Host "Manual intervention may be required" -ForegroundColor Yellow
        
  notify:
    runs-on: ubuntu-latest
    needs: [background-agent]
    if: always()
    
    steps:
    - name: Notify Results
      run: |
        echo "Background agent completed"
        echo "Status: ${{ needs.background-agent.result }}"
