name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        default: '1.0.0'
      include_examples:
        description: 'Include example modules in release'
        required: false
        default: false
        type: boolean

jobs:
  release:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Validate Repository Structure
      shell: pwsh
      run: .\.github\scripts\validate-repository-structure.ps1
      
    - name: Validate PowerShell Syntax
      shell: pwsh
      run: .\.github\scripts\validate-powershell-syntax.ps1
      
    - name: Test Module Loading
      shell: pwsh
      run: .\.github\scripts\test-module-loading.ps1
      
    - name: Create Release Package
      shell: pwsh
      run: |
        Write-Host "Creating release package..." -ForegroundColor Green
        
        $version = "${{ github.event.inputs.version || '1.0.0' }}"
        $includeExamples = "${{ github.event.inputs.include_examples || 'false' }}"
        $releaseDir = "release-v$version"
        
        # Create release directory
        New-Item -ItemType Directory -Path $releaseDir -Force | Out-Null
        
        # Copy main files
        Copy-Item "Microsoft.PowerShell_profile.ps1" $releaseDir -Force
        Copy-Item "README.md" $releaseDir -Force
        Copy-Item "CONTRIBUTING.md" $releaseDir -Force
        Copy-Item "LICENSE" $releaseDir -Force
        Copy-Item "MIGRATION_GUIDE.md" $releaseDir -Force
        
        # Copy scripts directory
        Copy-Item "scripts" $releaseDir -Recurse -Force
        
        # Copy docs directory
        Copy-Item "docs" $releaseDir -Recurse -Force
        
        # Copy modules (filter out examples if not requested)
        New-Item -ItemType Directory -Path "$releaseDir\modules" -Force | Out-Null
        
        $modules = Get-ChildItem "modules" -Directory
        foreach ($module in $modules) {
            if ($module.Name -eq "ExampleModule" -and $includeExamples -eq "false") {
                Write-Host "Skipping example module: $($module.Name)" -ForegroundColor Yellow
                continue
            }
            Copy-Item $module.FullName "$releaseDir\modules" -Recurse -Force
            Write-Host "Included module: $($module.Name)" -ForegroundColor Green
        }
        
        # Create installer script
        $installerContent = @"
# PowerShell Profile Manager Installer
# Version: $version
# Generated: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')

Write-Host "Installing PowerShell Profile Manager v$version..." -ForegroundColor Green

# Download and execute installation script
try {
    `$installScript = Invoke-WebRequest -Uri "https://raw.githubusercontent.com/emilwojcik93/powershell-profile-manager/main/scripts/install.ps1" -UseBasicParsing
    Invoke-Expression `$installScript.Content
} catch {
    Write-Host "Failed to download installation script: `$(`$_.Exception.Message)" -ForegroundColor Red
    exit 1
}
"@
        
        $installerContent | Out-File -FilePath "$releaseDir\install.ps1" -Encoding UTF8
        
        Write-Host "Release package created: $releaseDir" -ForegroundColor Green
        
    - name: Create Release Archive
      shell: pwsh
      run: |
        $version = "${{ github.event.inputs.version || '1.0.0' }}"
        $releaseDir = "release-v$version"
        $archiveName = "powershell-profile-manager-v$version.zip"
        
        # Create ZIP archive
        Compress-Archive -Path "$releaseDir\*" -DestinationPath $archiveName -Force
        
        Write-Host "Release archive created: $archiveName" -ForegroundColor Green
        
    - name: Upload Release Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-v${{ github.event.inputs.version || '1.0.0' }}
        path: |
          release-v${{ github.event.inputs.version || '1.0.0' }}/
          powershell-profile-manager-v${{ github.event.inputs.version || '1.0.0' }}.zip
        retention-days: 30
        
    - name: Create GitHub Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: PowerShell Profile Manager ${{ github.event.inputs.version || '1.0.0' }}
        body: |
          ## PowerShell Profile Manager ${{ github.event.inputs.version || '1.0.0' }}
          
          ### Installation
          
          ```powershell
          # Install the profile manager
          iwr -useb https://raw.githubusercontent.com/emilwojcik93/powershell-profile-manager/main/scripts/install.ps1 | iex
          ```
          
          ### Features
          
          - Modular PowerShell profile management
          - Cursor IDE integration with MCP server
          - Video compression utilities
          - Comprehensive documentation
          - Easy installation and uninstallation
          
          ### Changes in this release
          
          - See [CHANGELOG.md](CHANGELOG.md) for detailed changes
          
        draft: false
        prerelease: false
        
    - name: Upload Release Asset
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./powershell-profile-manager-v${{ github.event.inputs.version || '1.0.0' }}.zip
        asset_name: powershell-profile-manager-v${{ github.event.inputs.version || '1.0.0' }}.zip
        asset_content_type: application/zip
